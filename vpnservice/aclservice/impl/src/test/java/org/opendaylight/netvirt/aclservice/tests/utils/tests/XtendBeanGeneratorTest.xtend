package org.opendaylight.netvirt.aclservice.tests.utils.tests

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test
import org.eclipse.xtend.lib.annotations.Accessors
import org.opendaylight.netvirt.aclservice.tests.utils.XtendBeanGenerator
import java.math.BigInteger
import java.util.List
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.junit.Ignore

/**
 * Unit test for XtendBeanGenerator.
 *
 * @author Michael Vorburger
 */
class XtendBeanGeneratorTest {

    val g = new XtendBeanGenerator()

    @Test def void simplestNumberExpression() {
        assertThatEndsWith(g.getExpression(123), "123")
    }

    @Test def void simpleCharacter() {
        assertThatEndsWith(g.getExpression(new Character("c")), "'c'")
    }

    @Test def void nullCharacter() {
        var Character nullCharacter
        assertThatEndsWith(g.getExpression(nullCharacter), "null")
    }

    @Test def void defaultCharacter() {
        var char defaultCharacter
        assertThatEndsWith(g.getExpression(defaultCharacter), "")
    }

    @Test def void emptyString() {
        assertThatEndsWith(g.getExpression(""), "")
    }

    @Test def void aNull() {
        assertThatEndsWith(g.getExpression(null), "null")
    }

    @Test def void emptyList() {
        assertThatEndsWith(g.getExpression(#[]), "#[\n]")
    }

    @Test def void complexEmptyBean() {
        assertEquals('''
            // Code auto. generated by Michael Vorburger's org.opendaylight.netvirt.aclservice.tests.utils.XtendBeanGenerator
            new Bean => [
            ]'''.toString, g.getExpression(new Bean))
    }

    @Test def void complexBean() {
        val bean = new Bean => [
            ALongObject = 123L
            AShort = 123 as short
            anInt = 123
            anInteger = 123
            bigInteger = 456bi
            innerBean = new Bean => [
                name = "1beanz"
            ]
            name = "hello, world"
            beanz = #[
                new Bean => [
                    name = "beanz1"
                ]
            ]
        ]

        assertEquals('''
            // Code auto. generated by Michael Vorburger's org.opendaylight.netvirt.aclservice.tests.utils.XtendBeanGenerator
            new Bean => [
                ALongObject = 123L
                AShort = 123 as short
                anInt = 123
                anInteger = 123
                beanz = #[
                    new Bean => [
                        name = "beanz1"
                    ]
                ]
                bigInteger = 456bi
                innerBean = new Bean => [
                    name = "1beanz"
                ]
                name = "hello, world"
            ]'''.toString, g.getExpression(bean))
    }

    @Ignore
    @Test def void beanWithConstructor() {
        val bean = new BeanWithConstructor("hello, world", 123) => [
            address = "Street 1"
        ]
        assertThatEndsWith(g.getExpression(bean), '''
            new BeanWithConstructor("hello, world", 123) => [
                address = "Street 1"
            ]
        '''.toString)
    }


    def private void assertThatEndsWith(String string, String endsWith) {
        assertTrue("'''" + string + "''' expected to endWith '''" + endsWith + "'''", string.endsWith(endsWith));
    }


    public static class BeanWithConstructor {
        @Accessors(PUBLIC_GETTER) final String name
        @Accessors(PUBLIC_GETTER) final Integer age
        @Accessors String address

        @FinalFieldsConstructor
        new() { }
    }

    @Accessors
    public static class Bean {
        String name
        int anInt
        Integer anInteger

        @Accessors(PUBLIC_GETTER) /* but no setter */ String onlyGetterString = "onlyGetterNoSetterString"

        boolean aBoolean
        Boolean aBooleanObject

        char aChar
        Character aCharacter

        short aShort
        BigInteger bigInteger
        long aLong
        Long aLongObject
        Long nullLong
        Byte aByteObject
        byte aByte
        double aDouble
        Double aDoubleObject
        float aFloat
        Float aFloatObject

        Bean innerBean
        @Accessors(PUBLIC_GETTER) List<Bean> beanz = newArrayList
    }
}
