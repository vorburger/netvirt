package org.opendaylight.netvirt.aclservice.tests.utils

import java.math.BigInteger
import java.util.List
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.mockito.cglib.core.ReflectUtils
import java.lang.reflect.Constructor
import java.util.Map
import java.lang.reflect.Parameter
import org.opendaylight.netvirt.aclservice.tests.utils.XtendBeanGenerator.Property

/**
 * Magic. pure. Magic.
 *
 * Generates highly readable Java Bean object initialization code
 * based on the <a href="https://eclipse.org/xtend/documentation/203_xtend_expressions.html#with-operator">
 * Xtend With Operator</a>.  This syntax is very well suited e.g. to capture expected objects in test code.
 *
 * <p>Xtend is a cool JVM language which itself
 * transpiles to Java source code.  There are <a href="https://eclipse.org/xtend/download.html">plugins
 * for Eclipse and IntelliJ IDEA to work with Xtend</a> available.  It is also possible
 * to use Gradle's Continuous Build mode on the Command Line to get Xtend translated to Java on the fly.
 *
 * @author Michael Vorburger
 */
class XtendBeanGenerator {

    // TODO Support Builder - automatically, just check CP for *Builder

    def void print(Object bean) {
        System.out.println(getExpression(bean))
    }

    def String getExpression(Object bean) {
        '''
        // Code auto. generated by Michael Vorburger's «class.name»
        «stringify(bean)»'''
    }

    def protected CharSequence getNewBeanExpression(Object bean) {
        val properties = getBeanProperties(bean)
        '''
        new «bean.class.simpleName»«constructorArguments(bean, properties)» => [
            «FOR property : properties.filter[name, property |
               property.isWriteable || property.type.isAssignableFrom(List)
            ].values»
            «IF (property.value != property.defaultValue)»
            «property.name» = «stringify(property.value)»
            «ENDIF»
            «ENDFOR»
        ]'''
    }

    def protected constructorArguments(Object bean, Map<String, Property> properties) {
        val constructors = bean.class.constructors
        if (constructors.isEmpty) ''''''
        else {
            val constructor = findSuitableConstructor(constructors)
            if (constructor == null) ''''''
            else {
                val parameters = constructor.parameters
                '''«FOR parameter : parameters BEFORE '(' SEPARATOR ', ' AFTER ')'»«getConstructorParameterValue(parameter, properties)»«ENDFOR»'''
            }
        }
    }

    def protected getConstructorParameterValue(Parameter parameter, Map<String, Property> properties) {
        if (!parameter.isNamePresent)
            // https://docs.oracle.com/javase/tutorial/reflect/member/methodparameterreflection.html
            throw new IllegalStateException(
                "Needs javac -parameters; or, in Eclipse: 'Store information about method parameters (usable via reflection)' in Window -> Preferences -> Java -> Compiler, for: " + parameter.declaringExecutable);
        val constructorParameterName = parameter.name
        val value = properties.get(constructorParameterName)
        if (value == null)
            throw new IllegalStateException(
                "Constructor parameter '" + constructorParameterName + "' not found in " +
                    parameter.declaringExecutable + " bean's properties: " + properties.keySet)
        properties.remove(constructorParameterName)
        return stringify(value.value)
    }

    def protected Constructor<?> findSuitableConstructor(Constructor<?>[] constructors) {
        for (Constructor<?> constructor : constructors) {
            if (constructor.parameterCount > 0)
                return constructor
        }
    }

    def protected CharSequence stringify(Object object) {
        switch object {
            case null : "null"
            Object[]  : '''
                        #[
                            «FOR e : object»
                            «stringify(e)»
                            «ENDFOR»
                        ]'''
            List<?>   : '''
                        #[
                            «FOR e : object»
                            «stringify(e)»
                            «ENDFOR»
                        ]'''
            String    : '''"«object»"'''
            Integer   : '''«object»'''
            Long      : '''«object»L'''
            Boolean   : '''«object»'''
            Byte      : '''«object»'''
            Character : '''«"'"»«object»«"'"»'''
            Double    : '''«object»d'''
            Float     : '''«object»f'''
            Short     : '''«object» as short'''
            BigInteger: '''«object»bi'''
            default   : '''«getNewBeanExpression(object)»'''
        }
    }

    def protected Map<String, Property> getBeanProperties(Object bean) {
        // could also implement using:
        //   * org.eclipse.xtext.xbase.lib.util.ReflectExtensions.get(Object, String)
        //   * com.google.common.truth.ReflectionUtil.getField(Class<?>, String)
        //   * org.codehaus.plexus.util.ReflectionUtils
        val propertyDescriptors = ReflectUtils.getBeanProperties(bean.class)
        val propertiesMap = newLinkedHashMap()
        for (propertyDescriptor : propertyDescriptors) {
            propertiesMap.put(propertyDescriptor.name,
                new Property(propertyDescriptor.name,
                        propertyDescriptor.writeMethod != null,
                        propertyDescriptor.propertyType,
                        propertyDescriptor.readMethod.invoke(bean),
                        getDefaultValue(propertyDescriptor.propertyType)
            ))
        }
        return propertiesMap
    }

    def protected Object getDefaultValue(Class<?> propertyClass) {
        switch propertyClass {
            case Byte.TYPE: 0 as byte
            case Boolean.TYPE: false
            case Character.TYPE: new Character('\u0000')
            case Double.TYPE: 0.0d
            case Float.TYPE: 0.0f
            case Integer.TYPE: 0
            case List: #[]
            case Long.TYPE: 0L
            case Short.TYPE: 0 as short
            default: null
        }
    }

    @FinalFieldsConstructor @Accessors(PUBLIC_GETTER)
    protected static class Property {
        final String name
        final boolean isWriteable
        final Class<?> type
        final Object value
        final Object defaultValue
    }
}
