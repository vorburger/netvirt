package org.opendaylight.netvirt.aclservice.tests.utils

import java.math.BigInteger
import java.util.List
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.mockito.cglib.core.ReflectUtils

/**
 * Magic. pure. Magic.
 *
 * Generates highly readable Java Bean object initialization code
 * based on the <a href="https://eclipse.org/xtend/documentation/203_xtend_expressions.html#with-operator">
 * Xtend With Operator</a>.  This syntax is very well suited e.g. to capture expected objects in test code.
 *
 * <p>Xtend is a cool JVM language which itself
 * transpiles to Java source code.  There are <a href="https://eclipse.org/xtend/download.html">plugins
 * for Eclipse and IntelliJ IDEA to work with Xtend</a> available.  It is also possible
 * to use Gradle's Continuous Build mode on the Command Line to get Xtend translated to Java on the fly.
 *
 * @author Michael Vorburger
 */
class XtendBeanGenerator {

    // TODO Detect Constructor..
    // TODO Support Builder - automatically, just check CP for *Builder

    def void print(Object bean) {
        System.out.println(getExpression(bean))
    }

    def String getExpression(Object bean) {
        '''
        // Code auto. generated by Michael Vorburger's «class.name»
        «stringify(bean)»'''
    }

    def protected CharSequence getExpressionInternal(Object bean) {
        '''
        new «bean.class.simpleName»«constructorArguments(bean)» => [
            «FOR property : getBeanProperties(bean)»
            «IF (property.value != property.defaultValue)»
            «property.name» = «stringify(property.value)»
            «ENDIF»
            «ENDFOR»
        ]'''
    }

    def protected constructorArguments(Object bean) {
        ''''''
    }

    def protected stringify(Object object) {
        switch object {
            case null : "null"
//            Object[]  : '''#[ «FOR e : object»
//                «getXtendExpression(e)»
//            «ENDFOR»
//                           ]'''
            List<?>   : '''
                        #[
                            «FOR e : object»
                            «getExpressionInternal(e)»
                            «ENDFOR»
                        ]'''
            String    : '''"«object»"'''
            Integer   : '''«object»'''
            Long      : '''«object»L'''
            Boolean   : '''«object»'''
            Byte      : '''«object»'''
            Character : '''«"'"»«object»«"'"»'''
            Double    : '''«object»d'''
            Float     : '''«object»f'''
            Short     : '''«object» as short'''
            BigInteger: '''«object»bi'''
            default   : '''«getExpressionInternal(object)»'''
        }
    }

    def protected List<Property> getBeanProperties(Object bean) {
        // could also implement using:
        //   * org.eclipse.xtext.xbase.lib.util.ReflectExtensions.get(Object, String)
        //   * com.google.common.truth.ReflectionUtil.getField(Class<?>, String)
        //   * org.codehaus.plexus.util.ReflectionUtils
        val propertyDescriptors = ReflectUtils.getBeanProperties(bean.class)
        val properties = newArrayList()
        for (propertyDescriptor : propertyDescriptors) {
            if (propertyDescriptor.writeMethod != null || propertyDescriptor.propertyType.isAssignableFrom(List)) {
                properties.add(new Property(propertyDescriptor.name,
                               propertyDescriptor.readMethod.invoke(bean),
                               getDefaultValue(propertyDescriptor.propertyType)
                ))
            }
        }
        return properties
    }

    def protected Object getDefaultValue(Class<?> propertyClass) {
        switch propertyClass {
            case Byte.TYPE: 0 as byte
            case Boolean.TYPE: false
            case Character.TYPE: new Character('\u0000')
            case Double.TYPE: 0.0d
            case Float.TYPE: 0.0f
            case Integer.TYPE: 0
            case List: #[]
            case Long.TYPE: 0L
            case Short.TYPE: 0 as short
            default: null
        }
    }

    @FinalFieldsConstructor @Accessors(PUBLIC_GETTER)
    protected static class Property {
        final String name
        final Object value
        final Object defaultValue
    }
}
